'''def pesquisa_binaria(lista, item):
    baixo = 0
    alto = len(lista) - 1
    while baixo <= alto:  # enquanto ainda não chegou a um elemento
        meio = (baixo + alto) // 2  # verifica elemento central
        chute = lista[meio]
        if chute == item:  # acha o item
            return meio
        if chute > item:  # O chute foi muito alto
            alto = meio - 1
        else:            # O chute foi muito baixo
            baixo = meio + 1
    return None          # O item não existe


minha_lista = [1, 3, 5, 7, 9]

print(pesquisa_binaria(minha_lista, 3))  # => 1
print(pesquisa_binaria(minha_lista, -1))'''  # => None


# Suponha que você tenha uma lista com 128 nomes e esteja fazendo uma pesquisa binária.
# Qual seria o número máximo de etapas que você levaria para encontrar o nome desejado?

# Suponha que você duplique o tamanho da lista. Qual seria o número máximo de etapas agora?

# Outro exemplo: se a lista tem 100 itens, precisa-se de, no máximo, sete tentativas.
# Se tem 4 bilhões, precisa-se de, no máximo, 32 tentativas.

# Pesquisa Simples / Pesquisa Binária

# 100 elementos -> 100ms / 7ms
# 10000 elementos -> 10 segundos / 14 ms
# 1.000.000.000 elementos -> 11 dias / 32ms (aproximadamente 33 milhões de vezes mais rápido)

# tempo de execução O(n) versus tempo de execução O(log n)

# O(log n), tempo logarítmico. Exemplo: pesquisa binária.
# O(n * log n) -> Exemplo: um algoritmo rápido de ordenação, como quicksort
# O(n²) -> Exemplo: um algoritmo bastante lento, como o do caixeiro-viajante
